//
//                     (/, .#
//                  ((//**,#((/#%.%%#//
//              &#%&#((%&%########((/,,,/
//           (#(@#(%%%%&&&%%%%######(((//,
//          %%%%&%%%%%#&&&%&%%#%%#####(((///
//       &&&&%#&#//&&&@@&&&&%%####((((((((//*,
//      %@&@&%&@(/(&&&@@&&&%%%###((((((((((////
//    .%&@&#%&(#%(/%&@@@@@&&%%%###((((((((/////*//
//   &&&@%(&&*#(#/%&@@@@@@&&%%%###((((((((((////*(*
//  #%&&%%#&/(/%#(@@@@@@&&%%%##(((((/((((///////,//
//  #%%%(#@(#(/*(@@@@@%%%%(/***//((/(((///**//(,**,*
//  &&&#%%@%((//&@@@%%%/@%(/(***/##(((**/////*/,,,*     - - - - - - - - - - - -
//  #&@%%#(##(#%@@@&%(#&%#/(((/(#&&%(*,////**,//(///   | Best text editor ever! |
// @&%#&@#*((*&@@@&&&&%%&#(((%&@@@@&(((/(//((((/((*     - - - - - - - - - - - -
//  %#&%%(&((#&@@&&&&%###%%%##@@&%(//**(##(((((/*,     /
//   &%#/(%&%@%@@&&&&%%%%#(((**,,,/**,**/((#((//      /
//    ###&@@&&%&&@@&&&%%#(((##%&&%(/##(((/(((/(/     /
//     /(&#(#@%&%(%&%#&##(&&@&&%(#((#/((((((/((*(   /
//       @&@&@(((##@&&%#&@&%#/*.......*,,/(/(/(//  /
//       &&&&@@&(#(@@#@&@##(*.*//////// .(((((((((
//       @&&#&@@###%##&##(,*((((##((((((/*(//((***
//        ,/&%#@(/(#&&&%#///((((##((///(/*//((((*
//         (#&@((,%%&&%%#((/((/#(///(**(/((*//((/
//       ,&&%&%#(@%&/&#((#(//(/(*/(#&%((**//((//
//      &&&&&&%%@@*/*%(##(((##(/&(%&/,(((/((**(
//      %&&&&&%%%@##*%##(#####&&(((,((((/(((((
//      &&&&&&&&&%%%&####((##&##(**(/*/((/(/,
//      %&&&&&%%%#%###(#%(((##(*//.*/(*,*/(/,
//       *%&%%#%#%%%%&(%%///,*%((((/(((,,,.(*
//         (%#(/%#%&%#%%/,*//,(#%(/(/(((.((/
//            /#%&%#%##////(#%(@%*,,*/*/.(
//                 /(/#(((/*/#****/*,/*.

const std = @import("std");
const editor = @import("editor.zig");
const buffer = @import("buffer.zig");

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer switch (gpa.deinit()) {
        .leak => std.debug.panic("Some memory leaked!", .{}),
        .ok => {},
    };

    const ed = try editor.Editor.init(gpa.allocator());
    defer ed.deinit();

    if (std.os.argv.len > 1) {
        try ed.add_buffer(std.mem.span(std.os.argv[1]));
    }

    while (true) {
        try ed.refreshScreen();
        const c = try ed.readKey();
        const should_continue = try ed.processKeypress(c);
        if (!should_continue) {
            break;
        }
    }
}
